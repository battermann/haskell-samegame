module Games
  ( mkGame
  , jsGame10
  )
where

import           SameGameModels
import           SameGame
import           SearchState

mkGame :: Int -> Game
mkGame size = evaluateGameState (take size columns) (Score 0)
 where
  columns = map
    (map (Filled . Color) . take size)
    [ [0, 2, 3, 1, 2, 1, 3, 1, 0, 2, 2, 3, 1, 4, 0]
    , [3, 0, 0, 3, 3, 2, 4, 2, 0, 4, 0, 4, 2, 0, 1]
    , [1, 2, 2, 2, 4, 2, 3, 0, 0, 2, 0, 3, 4, 1, 3]
    , [1, 1, 2, 4, 2, 2, 3, 4, 2, 2, 3, 0, 3, 1, 3]
    , [0, 0, 1, 3, 1, 4, 1, 1, 2, 1, 2, 1, 0, 0, 4]
    , [1, 4, 4, 0, 0, 3, 1, 2, 3, 4, 0, 3, 2, 0, 3]
    , [4, 1, 3, 4, 1, 2, 0, 2, 4, 3, 2, 3, 0, 0, 4]
    , [1, 4, 4, 4, 2, 0, 4, 4, 3, 2, 3, 2, 2, 1, 3]
    , [4, 0, 1, 1, 3, 2, 4, 0, 2, 1, 3, 3, 3, 2, 2]
    , [1, 3, 2, 1, 2, 1, 2, 2, 3, 4, 3, 1, 4, 0, 4]
    , [1, 2, 2, 4, 4, 0, 1, 4, 0, 0, 0, 1, 3, 3, 4]
    , [1, 3, 1, 1, 0, 1, 0, 2, 3, 1, 1, 0, 1, 0, 0]
    , [0, 0, 1, 2, 2, 0, 0, 4, 4, 4, 1, 3, 2, 0, 3]
    , [4, 2, 3, 4, 4, 1, 1, 0, 3, 4, 1, 4, 2, 2, 2]
    , [2, 4, 1, 0, 3, 3, 3, 3, 4, 1, 1, 2, 3, 1, 1]
    ]

jsGame10 :: SearchState
jsGame10 = mkSearchState (mkGame 15) [] (Just bestPath)

bestPath :: Result
bestPath = Result
  { score = Score 3215
  , path  = reverse
            $   uncurry Position
            <$> [ (0 , 8)
                , (2 , 6)
                , (13, 5)
                , (4 , 6)
                , (12, 0)
                , (13, 3)
                , (9 , 0)
                , (11, 10)
                , (12, 2)
                , (11, 7)
                , (9 , 13)
                , (10, 11)
                , (4 , 0)
                , (10, 4)
                , (4 , 8)
                , (5 , 9)
                , (14, 4)
                , (4 , 8)
                , (13, 2)
                , (7 , 10)
                , (2 , 11)
                , (14, 4)
                , (3 , 3)
                , (5 , 0)
                , (6 , 3)
                , (10, 2)
                , (5 , 2)
                , (1 , 3)
                , (11, 1)
                , (1 , 1)
                , (11, 2)
                , (0 , 8)
                , (2 , 3)
                , (7 , 3)
                , (5 , 2)
                , (5 , 0)
                , (6 , 0)
                , (6 , 1)
                , (14, 5)
                , (10, 3)
                , (7 , 5)
                , (1 , 5)
                , (1 , 4)
                , (14, 1)
                , (5 , 0)
                , (4 , 1)
                , (9 , 1)
                , (11, 0)
                , (10, 0)
                , (7 , 1)
                , (1 , 0)
                , (0 , 0)
                , (0 , 1)
                , (0 , 0)
                , (0 , 0)
                , (3 , 0)
                , (0 , 0)
                , (0 , 0)
                , (0 , 0)
                , (0 , 0)
                ]
  }
